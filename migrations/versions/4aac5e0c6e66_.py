"""
Modification to users table and added constraint to user_role table

Revision ID: 4aac5e0c6e66
Revises: c8a6c762e818
Create Date: 2021-06-14 13:58:02.306535

"""
from alembic import op
import sqlalchemy as sa

# revision identifiers, used by Alembic.
revision = "4aac5e0c6e66"
down_revision = "c8a6c762e818"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    bind = op.get_bind()

    # First change - add "first_name" column
    op.add_column(
        "users", sa.Column("first_name", sa.String(length=128), nullable=True)
    )

    # Second change -  update "username" to take id value, add unique constraint, make it not nullable
    # We lose the "username" that would be set.
    op.execute("UPDATE users SET username = id")
    with op.batch_alter_table(
        "users", table_args=(sa.UniqueConstraint("username"),)
    ) as batch_op:
        batch_op.alter_column("username", nullable=False)
    if bind.engine.name == "postgresql":
        op.create_unique_constraint("c_unique_users_username", "users", ["username"])

    # Third change - drop column "admin"
    with op.batch_alter_table("users") as batch_op:
        batch_op.drop_column("admin")

    # Fourth change - drop column "super_admin"
    with op.batch_alter_table("users") as batch_op:
        batch_op.drop_column("super_admin")

    # Fifth change - drop column "name"
    with op.batch_alter_table("users") as batch_op:
        batch_op.drop_column("name")

    # Sixth change - add constrint to "user_role" table between "user_id" and "role_id"
    if bind.engine.name == "postgresql":
        op.create_unique_constraint(
            "c_unique_user_role_user_id_role_id", "user_role", ["user_id", "role_id"]
        )
    else:
        with op.batch_alter_table(
            "user_role",
            table_args=(
                sa.UniqueConstraint(
                    "user_id", "role_id", name="c_unique_user_role_user_id_role_id"
                ),
            ),
        ) as batch_op:
            batch_op.alter_column("user_id", nullable=False)

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    bind = op.get_bind()

    # First change - drop column first_name
    with op.batch_alter_table("users") as batch_op:
        batch_op.drop_column("first_name")

    # Second change - drop "username", create it again not unique and nullable.
    # We lose the "username" that would be set.
    if bind.engine.name == "postgresql":
        # op.execute("ALTER TABLE users DROP CONSTRAINT c_unique_users_username")
        op.drop_constraint("c_unique_users_username", "users")

    with op.batch_alter_table("users") as batch_op:
        batch_op.drop_column("username")

    op.add_column("users", sa.Column("username", sa.String(length=128), nullable=True))

    # Third change - add column "admin", nullable and False by default
    op.add_column(
        "users",
        sa.Column(
            "admin", sa.BOOLEAN(), server_default=sa.text("(false)"), nullable=True
        ),
    )

    # Fourth change - add column "super_admin", nullable and False by default
    op.add_column(
        "users",
        sa.Column(
            "super_admin",
            sa.BOOLEAN(),
            server_default=sa.text("(false)"),
            nullable=True,
        ),
    )

    # Fifth change - add column "name", nullable
    op.add_column("users", sa.Column("name", sa.VARCHAR(length=128), nullable=True))

    # Sixth change
    if bind.engine.name == "postgresql":
        op.drop_constraint(
            "c_unique_user_role_user_id_role_id", "user_role", type_="unique"
        )
    else:
        with op.batch_alter_table("user_role") as batch_op:
            batch_op.drop_constraint(
                "c_unique_user_role_user_id_role_id", type_="unique"
            )

    # ### end Alembic commands ###
